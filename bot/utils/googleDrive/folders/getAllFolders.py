from bot.utils.generateImages.dataArray.getModelNameIndex import (
    getModelNameIndex,
)
from bot.utils.googleDrive.auth import service


async def getAllFolders(model_names: list[str] = None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –≤ Google Drive —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –ø–∞–ø–∫–∏ –º–æ–¥–µ–ª–µ–π
    Args:
        model_names (list[str], optional): –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–∞–ø–∫–∏.
            –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –ø–∞–ø–∫–∏ –Ω–∞ –¥–∏—Å–∫–µ.
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –º–æ–¥–µ–ª–µ–π –∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∏—Ö –ø–∞–ø–∫–∏
    """
    try:
        # –°–æ–∑–¥–∞–µ–º query –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ –ø–∞–ø–æ–∫
        query = "mimeType='application/vnd.google-apps.folder'"

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –º–æ–¥–µ–ª—è–º
        models_info = {}
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫
        folder_dates = {}
        page_token = None

        while True:
            response = (
                service.files()
                .list(
                    q=query,
                    spaces="drive",
                    fields="nextPageToken, files(id, name, webViewLink, createdTime)",
                    pageToken=page_token,
                    supportsAllDrives=True,
                    includeItemsFromAllDrives=True,
                )
                .execute()
            )

            for folder in response.get("files", []):
                folder_name = folder.get("name")
                if folder_name not in ["video", "picture", "2025-06-03"] and (
                    model_names is None or folder_name in model_names
                ):
                    model_name = folder.get("name")
                    created_time = folder.get("createdTime")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–∞–ø–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
                    if model_name in folder_dates:
                        # –ï—Å–ª–∏ –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–∑–∂–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        if created_time > folder_dates[model_name]:
                            folder_dates[model_name] = created_time
                            models_info[model_name] = folder.get("webViewLink")
                    else:
                        # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤–ø–µ—Ä–≤—ã–µ
                        folder_dates[model_name] = created_time
                        models_info[model_name] = folder.get("webViewLink")

            page_token = response.get("nextPageToken")
            if not page_token:
                break

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∏–Ω–¥–µ–∫—Å, –∏–º—è, —Å—Å—ã–ª–∫–∞) –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        model_data = []
        for model_name, link in models_info.items():
            model_index = getModelNameIndex(model_name)
            if model_index:
                model_data.append((model_index, model_name, link))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        formatted_output = []
        for model_index, model_name, link in sorted(model_data):
            formatted_output.append(
                f"üë±‚Äç‚ôÄÔ∏è ({model_index}) –ú–æ–¥–µ–ª—å: {model_name}\nüìÅ –ü–∞–ø–∫–∞: {link}"
            )

        return "\n\n".join(formatted_output)

    except Exception as e:
        raise Exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫: {e}")
