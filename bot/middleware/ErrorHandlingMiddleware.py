import traceback
from collections.abc import Awaitable
from typing import Any, Callable, Dict

from aiogram import BaseMiddleware
from aiogram.types import TelegramObject

from bot.InstanceBot import bot
from bot.logger import logger
from bot.utils.error_notifier import send_error_to_developers
from bot.utils.httpx.error_texts import PAYMENT_RUNPOD_ERROR_TEXT
from bot.utils.videos.errors_texts import (
    PROMPT_NOT_PASSED_MODERATION_ERROR_TEXT,
)


class ErrorHandlingMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any],
    ) -> Any:
        try:
            return await handler(event, data)
        except Exception as e:
            if str(e) in [PAYMENT_RUNPOD_ERROR_TEXT]:
                return

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.error(
                f"–û—à–∏–±–∫–∞: {str(e)}\nTraceback: {traceback.format_exc()}",
            )

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—É—é —É—Ç–∏–ª–∏—Ç—É
                await send_error_to_developers(
                    e, 
                    "ErrorHandlingMiddleware", 
                    event,
                    f"Handler: {handler.__name__ if hasattr(handler, '__name__') else 'Unknown'}"
                )

                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤ —á–∞—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ
                if hasattr(event, "chat") and str(e) not in [PROMPT_NOT_PASSED_MODERATION_ERROR_TEXT]:
                    await bot.send_message(
                        event.chat.id,
                        "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. "
                        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–æ–±–ª–µ–º–µ.",
                    )
            except Exception as send_error:
                logger.error(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}",
                )

            # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
            raise
