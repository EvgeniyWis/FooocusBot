import asyncio
import traceback

from aiogram import types
from aiogram.exceptions import TelegramRetryAfter
from aiogram.fsm.context import FSMContext

from bot.app.core.logging import logger
from bot.app.instance import bot
from bot.helpers import text
from bot.helpers.handlers.messages.deleteMessageFromState import (
    deleteMessageFromState,
)
from bot.helpers.handlers.startGeneration.process_image import process_image
from bot.utils.handlers import (
    appendDataToStateArray,
)
from bot.utils.handlers.messages import (
    safe_send_media_group,
)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
async def sendImageBlock(
    state: FSMContext,
    media_group: list,
    model_name: str,
    group_number: str,
    user_id: int,
    job_id: str,
    model_key: str = None,
):
    try:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º media_group –¥–æ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (Telegram –ª–∏–º–∏—Ç)
        media_group = media_group[:10]
        media_group_message = await safe_send_media_group(user_id, media_group)
        if media_group_message is None:
            media_group_message = await safe_send_media_group(user_id, media_group)

        if media_group_message is None:
            logger.error(
                "media_group_message is None! –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É."
            )
            raise Exception("media_group_message is None! –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É.")

        if not hasattr(media_group_message, "__iter__"):
            logger.error(
                f"media_group_message –Ω–µ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç: {type(media_group_message)}"
            )
            await bot.send_message(
                chat_id=user_id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π! (media_group_message –Ω–µ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π)",
            )
            return
        logger.info(
            f"Media group sent to user_id={user_id}, model_name={model_name}, images_count={len(media_group)}",
        )

        await asyncio.sleep(0.7)
        logger.info(
            f"Slept 0.7s before starting auto-processing for user_id={user_id}, model_name={model_name}",
        )

        for i, message in enumerate(media_group_message):
            await appendDataToStateArray(
                state,
                "imageGeneration_mediagroup_messages_ids",
                {
                    "model_name": model_name,
                    "image_index": i,
                    "job_id": job_id,
                    "message_id": message.message_id,
                    "type": "media",
                },
                unique_keys=("model_name", "image_index", "job_id"),
            )

    except Exception as e:
        traceback.print_exc()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
        try:
            if isinstance(e, TelegramRetryAfter):
                await bot.send_message(
                    chat_id=user_id,
                    text=f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.retry_after} —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                )
            else:
                await bot.send_message(
                    chat_id=user_id,
                    text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π! –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {e}",
                )
        except:
            pass

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–µ–π—Ç–∞
        state_data = await state.get_data()

        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤—Å–µ, —Ç–æ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏–∑ —Å—Ç–µ–π—Ç–∞
        if group_number == "all":
            group_number = state_data.get(
                "current_group_number_for_unique_prompt",
                1,
            )

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞
        try:
            images_count = min(len(media_group_message), 4)

            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            header_message = await bot.send_message(
                chat_id=user_id,
                text=text.SELECT_IMAGE_PROGRESS_TEXT,
            )

            # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –µ—Å–ª–∏ –±—ã–ª–∏)
            await deleteMessageFromState(
                state,
                "imageGeneration_mediagroup_messages_ids",
                model_name,
                header_message.chat.id,
                delete_keyboard_message=True,
                job_id=job_id,
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for image_index in range(1, images_count + 1):
                status_message = await bot.send_message(
                    chat_id=user_id,
                    text=f"üîÑ –†–∞–±–æ—Ç–∞—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name} –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {image_index}... ({image_index}/{images_count})",
                )

                fake_call = types.CallbackQuery(
                    id=f"{job_id[:8]}_{image_index}",
                    from_user=types.User(id=user_id, is_bot=False, first_name="User"),
                    chat_instance="",
                    message=status_message,
                    data=f"auto_process|{model_name}|{group_number}|{image_index}|{job_id[:8]}",
                )

                logger.info(
                    f"–ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_index}/{images_count} –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name} (job_id={job_id})",
                )

                try:
                    await process_image(
                        fake_call,
                        state,
                        model_name,
                        image_index,
                        model_key=model_key,
                    )
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_index}: {e}",
                    )
                    try:
                        await bot.send_message(
                            chat_id=user_id,
                            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_index}: {str(e)}",
                        )
                    except Exception:
                        pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                )
            except Exception:
                pass
    except Exception as e:
        raise Exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ sendImageBlock: {e}")
