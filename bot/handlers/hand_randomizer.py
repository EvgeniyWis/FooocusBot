from aiogram import types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from InstanceBot import router
from keyboards import randomizer_keyboards
from logger import logger
from states.UserState import RandomizerState
from utils import text
from utils.handlers import editMessageOrAnswer
from utils.handlers.startGeneration import generateImagesInHandler


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é
async def handle_randomizer_buttons(call: types.CallbackQuery, state: FSMContext):
    action = call.data.split("|")[1]

    # –ï—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é"
    if action == "add_variable":
        await editMessageOrAnswer(
        call,text.ADD_VARIABLE_FOR_RANDOMIZER_TEXT)
        await state.set_state(RandomizerState.write_variable_for_randomizer)

    # –ï—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "‚ö°Ô∏è –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"
    elif action == "start_generation":
        data = await state.get_data()

        # –ï—Å–ª–∏ –Ω–µ—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
        if "variable_names_for_randomizer" not in data:
            await call.answer(text.VARIABLES_FOR_RANDOMIZER_NOT_WRITTEN_TEXT, show_alert=True)
            return

        else:
            user_id = call.from_user.id
            is_test_generation = data["generations_type"] == "test"
            setting_number = data["setting_number"]
            await generateImagesInHandler("", call.message, state, user_id, is_test_generation, setting_number, True)

    else:
        variable_name = action
        await state.update_data(selected_variable_name=variable_name)
        await editMessageOrAnswer(
        call,text.SELECT_VARIABLE_FOR_RANDOMIZER_TEXT.format(variable_name),
        reply_markup=randomizer_keyboards.variableActionKeyboard(variable_name))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
async def handle_variable_action_buttons(call: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    action = call.data.split("|")[1]
    data = await state.get_data()

    # –ï—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "üîô –ù–∞–∑–∞–¥"
    if action == "back":
        await editMessageOrAnswer(
        call,text.RANDOMIZER_MENU_TEXT,
        reply_markup=randomizer_keyboards.randomizerKeyboard(data["variable_names_for_randomizer"]))
        return

    variable_name = call.data.split("|")[2]
    # –ï—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è"
    if action == "add_values":
        await editMessageOrAnswer(
        call,text.ADD_VALUES_FOR_VARIABLE_FOR_RANDOMIZER_TEXT.format(variable_name))
        await state.set_state(RandomizerState.write_value_for_variable_for_randomizer)

    # –ï—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ"
    elif action == "delete_values":
        variable_name_values = f"randomizer_{variable_name}_values"
        values = data[variable_name_values]

        await editMessageOrAnswer(
        call,text.DELETE_VALUES_FOR_VARIABLE_FOR_RANDOMIZER_TEXT.format(variable_name),
        reply_markup=randomizer_keyboards.deleteValuesForVariableKeyboard(values, variable_name))

    # –ï—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é"
    elif action == "delete_variable":
        data = await state.get_data()
        data["variable_names_for_randomizer"].remove(variable_name)
        await state.update_data(**data)
        await editMessageOrAnswer(
        call,text.RANDOMIZER_MENU_TEXT,
        reply_markup=randomizer_keyboards.randomizerKeyboard(data["variable_names_for_randomizer"]))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
async def handle_delete_value_for_variable_buttons(call: types.CallbackQuery, state: FSMContext):
    # –ï—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "üîô –ù–∞–∑–∞–¥"
    data = await state.get_data()
    if call.data == "randomizer_delete_value|back":
        await editMessageOrAnswer(
        call,text.SELECT_VARIABLE_FOR_RANDOMIZER_TEXT.format(data["selected_variable_name"]),
        reply_markup=randomizer_keyboards.variableActionKeyboard(data["selected_variable_name"]))
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    variable_name = call.data.split("|")[1]
    value = call.data.split("|")[2]
    variable_name_values = f"randomizer_{variable_name}_values"
    values = data[variable_name_values]
    values.remove(value)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–µ–π—Ç
    await state.update_data(**{variable_name_values: values})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await editMessageOrAnswer(
        call,text.DELETE_VALUES_FOR_VARIABLE_FOR_RANDOMIZER_TEXT.format(variable_name),
        reply_markup=randomizer_keyboards.deleteValuesForVariableKeyboard(values, variable_name))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
async def write_variable_for_randomizer(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    variable_name = message.text

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å—Ç–µ–π—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
    if "variable_names_for_randomizer" not in data:
        await state.update_data(variable_names_for_randomizer=[variable_name])
    else:
        if variable_name not in data["variable_names_for_randomizer"]:
            data["variable_names_for_randomizer"].append(variable_name)
            await state.update_data(variable_names_for_randomizer=data["variable_names_for_randomizer"])
        else:
            await message.answer(text.VARIABLE_ALREADY_EXISTS_TEXT)
            return

    await state.set_state(None)
    await message.answer(text.WRITE_VARIABLE_FOR_RANDOMIZER_TEXT,
        reply_markup=randomizer_keyboards.stopInputValuesForVariableKeyboard())
    await state.set_state(RandomizerState.write_value_for_variable_for_randomizer)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
async def write_value_for_variable_for_randomizer(message: types.Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        all_variable_names = data["variable_names_for_randomizer"]
        variable_name = all_variable_names[-1]
        variable_name_values = f"randomizer_{variable_name}_values"

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "üö´ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π", —Ç–æ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        if message.text == "üö´ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π":
            if "selected_variable_name" in data:
                await message.answer(text.SELECT_VARIABLE_FOR_RANDOMIZER_TEXT.format(data["selected_variable_name"]),
                reply_markup=randomizer_keyboards.variableActionKeyboard(data["selected_variable_name"]))
            else:
                await message.answer(text.RANDOMIZER_MENU_TEXT,
                reply_markup=randomizer_keyboards.randomizerKeyboard(all_variable_names))
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ
        value = message.text

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –µ—â—ë –Ω–µ—Ç –≤ —Å—Ç–µ–π—Ç–µ, —Ç–æ —Å–æ–∑–¥–∞—ë–º –µ—ë
        if variable_name_values not in data:
            await state.update_data(**{variable_name_values: [value]})
        else: # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É–∂–µ –µ—Å—Ç—å –≤ —Å—Ç–µ–π—Ç–µ, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
            data[variable_name_values].append(value)
            await state.update_data(**{variable_name_values: data[variable_name_values]})

        await state.set_state(None)
        await message.answer(text.WRITE_VALUE_FOR_VARIABLE_FOR_RANDOMIZER_TEXT.format(value, variable_name))
        await state.set_state(RandomizerState.write_value_for_variable_for_randomizer)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞: {e}")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def hand_add():
    router.callback_query.register(handle_variable_action_buttons, lambda call: call.data.startswith("randomizer_variable"))

    router.callback_query.register(handle_delete_value_for_variable_buttons, lambda call: call.data.startswith("randomizer_delete_value"))

    router.callback_query.register(handle_randomizer_buttons, lambda call: call.data.startswith("randomizer"))

    router.message.register(write_variable_for_randomizer, StateFilter(RandomizerState.write_variable_for_randomizer))

    router.message.register(write_value_for_variable_for_randomizer, StateFilter(RandomizerState.write_value_for_variable_for_randomizer))
