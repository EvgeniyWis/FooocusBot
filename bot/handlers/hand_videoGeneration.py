from utils.handlers import increaseCountInState
from utils.handlers import appendDataToStateArray
from assets.mocks.links import MOCK_LINK_FOR_SAVE_VIDEO
from utils.handlers.videoGeneration import sendNextModelMessage
from utils import retryOperation, text
from utils.videos import generateVideo
from utils.videoExamples import getVideoExampleDataByIndex, getVideoExamplesData
from utils.generateImages.dataArray import getModelNameIndex
from utils.handlers import editMessageOrAnswer
from utils.googleDrive.files import saveFile
from utils.googleDrive.folders import getFolderDataByID
from aiogram import types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from keyboards import video_generation_keyboards
from states import StartGenerationState
from logger import logger
from InstanceBot import bot
import traceback
from InstanceBot import router
import os
from datetime import datetime
from config import MOCK_MODE


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üìπ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ"
async def start_generate_video(call: types.CallbackQuery, state: FSMContext):
    temp = call.data.split("|")
    if len(temp) == 2:
        model_name = temp[1]
    else:
        model_name = None

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–π –º–æ–¥–µ–ª–∏
    await sendNextModelMessage(state, call, model_name)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–∂–∏–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
async def handle_video_generation_mode_buttons(call: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –º–æ–¥–µ–ª–∏
    model_name = call.data.split("|")[1]
    model_name_index = getModelNameIndex(model_name)

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
    mode = call.data.split("|")[2]

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º "–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç", —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    if mode == "write_prompt":
        await state.update_data(model_name_for_video_generation=model_name)
        await editMessageOrAnswer(
        call,text.WRITE_PROMPT_FOR_VIDEO_TEXT.format(model_name, model_name_index))
        await state.set_state(StartGenerationState.write_prompt_for_video)
        return

    # TODO: —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã", —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞–º–∏
    # elif mode == "use_examples":
    #     # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ-—à–∞–±–ª–æ–Ω—ã —Å –∏—Ö –ø—Ä–æ–º–ø—Ç–∞–º–∏
    #     templates_examples = await getVideoExamplesData()

    #     # –í—ã–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä—ã –≤–º–µ—Å—Ç–µ —Å –∏—Ö –ø—Ä–æ–º–ø—Ç–∞–º–∏
    #     video_examples_messages_ids = []
    #     for index, value in templates_examples.items():
    #         video_example_message = await call.message.answer_video(
    #             video=value["file_id"],
    #             caption=text.VIDEO_EXAMPLE_TEXT.format(model_name, model_name_index, value["prompt"]),
    #             reply_markup=video_generation_keyboards.generatedVideoKeyboard(f"generate_video|{index}|{model_name}")
    #         )
    #         video_examples_messages_ids.append(video_example_message.message_id)
    #         await state.update_data(video_examples_messages_ids=video_examples_messages_ids)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–æ–º
async def handle_video_example_buttons(call: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞ –∏ —Ç–∏–ø –∫–Ω–æ–ø–∫–∏
    temp = call.data.split("|")

    if len(temp) == 4:
        # TODO: —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
        # index = int(temp[1])
        model_name = temp[2]
        button_type = temp[3]
        # await state.update_data(video_example_index=index)
    else:
        model_name = temp[1]
        button_type = temp[2]

    user_id = call.from_user.id
    await state.update_data(type_for_video_generation=button_type)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ url –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    data = await state.get_data()
    image_url = data["image_url"]

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞
    # TODO: —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
    # try:
    #     await bot.delete_message(user_id, int(data["select_video_example_message_id"]))
    # except Exception as e:
    #     logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å id {data['select_video_example_message_id']}: {e}")

    # if len(temp) == 4:
    #     # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞ –ø–æ –µ–≥–æ –∏–Ω–¥–µ–∫—Å—É
    #     video_example_data = await getVideoExampleDataByIndex(index)

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∞ –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –±–µ—Ä–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞ 
    if "prompt_for_video" in data:
        custom_prompt = data["prompt_for_video"]
    else:
        custom_prompt = None

    # TODO: —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω, –ø–æ—ç—Ç–æ–º—É –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    video_example_prompt = custom_prompt
    
    # TODO: —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
    # if custom_prompt:
    #     video_example_prompt = custom_prompt
    # else:
    #     video_example_prompt = video_example_data["prompt"]

    # # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞–º–∏
    # if "video_examples_messages_ids" in data:
    #     video_examples_messages_ids = data["video_examples_messages_ids"]

    #     for message_id in video_examples_messages_ids:
    #         try:
    #             await bot.delete_message(user_id, int(message_id))
    #         except Exception as e:
    #             logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å id {message_id}: {e}")
                
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await bot.delete_message(user_id, call.message.message_id)
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å id {call.message.message_id}: {e}")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –º–æ–¥–µ–ª–∏
    model_name_index = getModelNameIndex(model_name)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ
    message_for_delete = await editMessageOrAnswer(
        call,text.GENERATE_VIDEO_PROGRESS_TEXT.format(model_name, model_name_index))
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
    stateData = await state.get_data()
    stateData["saved_images_urls"].pop(0)
    await state.update_data(saved_images_urls=stateData["saved_images_urls"])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å
    await sendNextModelMessage(state, call)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–∞—Ç—É –≤ —Å—Ç–µ–π—Ç
    dataForUpdate = {f"{model_name}": image_url}
    stateData["saved_images_urls"].append(dataForUpdate)
    await state.update_data(saved_images_urls=stateData["saved_images_urls"])

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Ç–æ–≥–æ, —Å–∫–æ–ª—å–∫–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å –º–æ–¥–µ–ª–µ–π
    await increaseCountInState(state, "sent_videos_count")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    stateData = await state.get_data()
    if stateData["sent_videos_count"] == len(stateData["saved_images_urls"]):
        await call.message.answer(text.SAVING_VIDEOS_SUCCESS_TEXT, 
        reply_markup=video_generation_keyboards.saveVideoKeyboard())

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ
    if MOCK_MODE:
        video_path = "FocuuusBot/bot/assets/mocks/mock_video.mp4"
    else:
        try:
            video_path = await retryOperation(generateVideo, 10, 1.5, video_example_prompt, image_url)
        except Exception as e:
                
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ
            await bot.delete_message(user_id, message_for_delete.message_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            traceback.print_exc()
            await editMessageOrAnswer(
            call,text.GENERATE_VIDEO_ERROR_TEXT.format(model_name, e))
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}: {e}")
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –≤ —Å—Ç–µ–π—Ç
    await appendDataToStateArray(state, "generated_video_paths", video_path)


# –•–µ–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ
async def write_prompt_for_video(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    prompt = message.text
    await state.update_data(prompt_for_video=prompt)
    data = await state.get_data()
    image_url = data["image_url"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
    model_name = data["model_name_for_video_generation"]

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –º–æ–¥–µ–ª–∏
    model_name_index = getModelNameIndex(model_name)
    
    await message.answer_photo(
    photo=image_url,
    caption=text.WRITE_PROMPT_FOR_VIDEO_SUCCESS_TEXT.format(model_name, model_name_index, prompt),
    reply_markup=video_generation_keyboards.generatedVideoKeyboard(f"generate_video|{model_name}"))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ
async def handle_video_correctness_buttons(call: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∫–Ω–æ–ø–∫–∏
    temp = call.data.split("|")
    button_type = temp[1]
    model_name = temp[2]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    video_path = data["video_path"]
    user_id = call.from_user.id
    video_folder_id = data["video_folder_id"]
    now = datetime.now().strftime("%Y-%m-%d")

    if button_type == "correct":
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.delete_message(user_id, call.message.message_id)

        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
        stateData = await state.get_data()
        stateData["saved_images_urls"].pop(0)
        await state.update_data(saved_images_urls=stateData["saved_images_urls"])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –º–æ–¥–µ–ª–∏
        model_name_index = getModelNameIndex(model_name)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
        message_for_edit = await editMessageOrAnswer(
        call,text.SAVE_VIDEO_PROGRESS_TEXT.format(model_name, model_name_index))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ
        if not MOCK_MODE:
            link = await saveFile(video_path, user_id, model_name, video_folder_id, now, False)
        else:
            link = MOCK_LINK_FOR_SAVE_VIDEO

        if not link:
            await editMessageOrAnswer(
        call,text.SAVE_FILE_ERROR_TEXT)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–∏
        folder = getFolderDataByID(video_folder_id)
        parent_folder_id = folder['parents'][0]
        parent_folder = getFolderDataByID(parent_folder_id)

        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ –ø–æ id {video_folder_id}: {folder}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ
        await bot.delete_message(user_id, message_for_edit.message_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ
        await message_for_edit.answer(text.SAVE_VIDEO_SUCCESS_TEXT
        .format(link, model_name, parent_folder['webViewLink'], model_name_index))

        # –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ –∏–∑ –ø–∞–ø–∫–∏ temp/videos
        if not MOCK_MODE:
            os.remove(video_path)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–µ–π—Ç, —Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏–ª–æ—Å—å
        await increaseCountInState(state, "saved_videos_count")

        # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if len(stateData["saved_images_urls"]) == stateData["saved_videos_count"] + 1 and not stateData["specific_model"]:
            await call.message.answer(text.SAVING_VIDEOS_SUCCESS_TEXT)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
async def start_save_video(call: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –º–æ–¥–µ–ª—å –≤ –æ—á–µ—Ä–µ–¥–∏
    stateData = await state.get_data()
    model_name = list(stateData["generated_video_paths"][0].keys())[0]
    video_path = stateData["generated_video_paths"][0][model_name]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    type_for_video_generation = stateData["type_for_video_generation"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
    video = types.FSInputFile(video_path)
    if type_for_video_generation == "test":
        # TODO: —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
        # if "video_example_index" in stateData:
        #     prefix = f"generate_video|{stateData['video_example_index']}|{model_name}"
        # else:
        #     prefix = f"generate_video|{model_name}"

        prefix = f"generate_video|{model_name}"

        await call.message.answer_video(video=video, caption=text.GENERATE_TEST_VIDEO_SUCCESS_TEXT.format(model_name), 
        reply_markup=video_generation_keyboards.generatedVideoKeyboard(prefix, False))

    elif type_for_video_generation == "work":
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –º–æ–¥–µ–ª–∏
        model_name_index = getModelNameIndex(model_name)

        await call.message.answer_video(video=video, caption=text.GENERATE_VIDEO_SUCCESS_TEXT.format(model_name, model_name_index), 
        reply_markup=video_generation_keyboards.videoCorrectnessKeyboard(model_name))



# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def hand_add():
    router.callback_query.register(start_generate_video, lambda call: call.data == "start_generate_video")

    router.callback_query.register(handle_video_generation_mode_buttons, lambda call: call.data.startswith("generate_video_mode"))

    router.callback_query.register(handle_video_example_buttons, lambda call: call.data.startswith("generate_video"))

    router.message.register(write_prompt_for_video, StateFilter(StartGenerationState.write_prompt_for_video))

    router.callback_query.register(handle_video_correctness_buttons, 
    lambda call: call.data.startswith("video_correctness"))

    router.callback_query.register(start_save_video, lambda call: call.dat–∞ == "start_save_video")
