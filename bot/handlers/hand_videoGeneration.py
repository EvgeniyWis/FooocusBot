from utils.handlers import increaseCountInState, editMessageOrAnswer, appendDataToStateArray
from assets.mocks.links import MOCK_LINK_FOR_SAVE_VIDEO
from utils.handlers.videoGeneration import sendNextModelMessage, saveVideo
from utils import retryOperation, text
from utils.videos import generateVideo
from utils.generateImages.dataArray import getModelNameIndex, getDataByModelName
from utils.googleDrive.files import saveFile
from aiogram import types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from keyboards import video_generation_keyboards
from states import StartGenerationState
from logger import logger
import traceback
from InstanceBot import router
from datetime import datetime
from config import MOCK_MODE
from utils.handlers.startGeneration import waitStateArrayReplenishment


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üìπ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ"
async def start_generate_video(call: types.CallbackQuery, state: FSMContext):
    temp = call.data.split("|")
    if len(temp) == 2:
        model_name = temp[1]
    else:
        model_name = None

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–µ–π—Ç—ã
    await state.update_data(sent_videos_count=0)
    await state.update_data(saved_videos_count=0)
    await state.update_data(generated_video_paths=[])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–π –º–æ–¥–µ–ª–∏
    await sendNextModelMessage(state, call, model_name)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–∂–∏–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
async def handle_video_generation_mode_buttons(call: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –º–æ–¥–µ–ª–∏
    model_name = call.data.split("|")[1]
    model_name_index = getModelNameIndex(model_name)

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
    mode = call.data.split("|")[2]

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º "–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç", —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    if mode == "write_prompt":
        await state.update_data(model_name_for_video_generation=model_name)
        await editMessageOrAnswer(
        call,text.WRITE_PROMPT_FOR_VIDEO_TEXT.format(model_name, model_name_index))
        await state.set_state(StartGenerationState.write_prompt_for_video)
        return

    # TODO: —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã", —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞–º–∏
    # elif mode == "use_examples":
    #     # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ-—à–∞–±–ª–æ–Ω—ã —Å –∏—Ö –ø—Ä–æ–º–ø—Ç–∞–º–∏
    #     templates_examples = await getVideoExamplesData()

    #     # –í—ã–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä—ã –≤–º–µ—Å—Ç–µ —Å –∏—Ö –ø—Ä–æ–º–ø—Ç–∞–º–∏
    #     video_examples_messages_ids = []
    #     for index, value in templates_examples.items():
    #         video_example_message = await call.message.answer_video(
    #             video=value["file_id"],
    #             caption=text.VIDEO_EXAMPLE_TEXT.format(model_name, model_name_index, value["prompt"]),
    #             reply_markup=video_generation_keyboards.generatedVideoKeyboard(f"generate_video|{index}|{model_name}")
    #         )
    #         video_examples_messages_ids.append(video_example_message.message_id)
    #         await state.update_data(video_examples_messages_ids=video_examples_messages_ids)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–æ–º
async def handle_video_example_buttons(call: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞ –∏ —Ç–∏–ø –∫–Ω–æ–ø–∫–∏
    temp = call.data.split("|")

    if len(temp) == 4:
        # TODO: —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
        # index = int(temp[1])
        model_name = temp[2]
        type_for_video_generation = temp[3]
        # await state.update_data(video_example_index=index)
    else:
        model_name = temp[1]
        type_for_video_generation = temp[2]

    user_id = call.from_user.id
    await state.update_data(type_for_video_generation=type_for_video_generation)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ url –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    data = await state.get_data()
    image_url = data["images_urls"][model_name]

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞
    # TODO: —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
    # try:
    #     await bot.delete_message(user_id, int(data["select_video_example_message_id"]))
    # except Exception as e:
    #     logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å id {data['select_video_example_message_id']}: {e}")

    # if len(temp) == 4:
    #     # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞ –ø–æ –µ–≥–æ –∏–Ω–¥–µ–∫—Å—É
    #     video_example_data = await getVideoExampleDataByIndex(index)

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∞ –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –±–µ—Ä–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞ 
    if "prompt_for_video" in data:
        custom_prompt = data["prompt_for_video"]
    else:
        custom_prompt = None

    # TODO: —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω, –ø–æ—ç—Ç–æ–º—É –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    video_example_prompt = custom_prompt
    
    # TODO: —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
    # if custom_prompt:
    #     video_example_prompt = custom_prompt
    # else:
    #     video_example_prompt = video_example_data["prompt"]

    # # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞–º–∏
    # if "video_examples_messages_ids" in data:
    #     video_examples_messages_ids = data["video_examples_messages_ids"]

    #     for message_id in video_examples_messages_ids:
    #         try:
    #             await bot.delete_message(user_id, int(message_id))
    #         except Exception as e:
    #             logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å id {message_id}: {e}")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –º–æ–¥–µ–ª–∏
    model_name_index = getModelNameIndex(model_name)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ
    message_for_edit = await editMessageOrAnswer(
        call, text.GENERATE_VIDEO_PROGRESS_TEXT.format(model_name, model_name_index))
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
    stateData = await state.get_data()
    stateData["saved_images_urls"] = [x for x in stateData["saved_images_urls"] if not (model_name in x)]
    await state.update_data(saved_images_urls=stateData["saved_images_urls"])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å
    await sendNextModelMessage(state, call)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–∞—Ç—É –≤ —Å—Ç–µ–π—Ç
    dataForUpdate = {f"{model_name}": image_url}
    stateData["saved_images_urls"].append(dataForUpdate)
    await state.update_data(saved_images_urls=stateData["saved_images_urls"])

    if type_for_video_generation == "work":
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Ç–æ–≥–æ, —Å–∫–æ–ª—å–∫–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å –º–æ–¥–µ–ª–µ–π
        await increaseCountInState(state, "sent_videos_count")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        stateData = await state.get_data()
        if stateData["sent_videos_count"] == len(stateData["saved_images_urls"]):
            await call.message.answer(text.SAVING_VIDEOS_SUCCESS_TEXT, 
            reply_markup=video_generation_keyboards.saveVideoKeyboard())

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ
    if MOCK_MODE:
        video_path = "FocuuusBot/bot/assets/mocks/mock_video.mp4"
    else:
        try:
            video_path = await retryOperation(generateVideo, 10, 1.5, video_example_prompt, image_url)
        except Exception as e:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            traceback.print_exc()
            await editMessageOrAnswer(
            call,text.GENERATE_VIDEO_ERROR_TEXT.format(model_name, e))
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}: {e}")
            return
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ
    await message_for_edit.edit_text(text.GENERATE_VIDEO_SUCCESS_TEXT.format(model_name, model_name_index))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –≤ —Å—Ç–µ–π—Ç (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–∞–±–æ—á–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
    if type_for_video_generation == "work":
        dataForUpdate = {"model_name": model_name, "video_path": video_path}
        await appendDataToStateArray(state, "generated_video_paths", dataForUpdate)
    else: # –ü—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —é–∑–µ—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        video = types.FSInputFile(video_path)
        await call.message.answer_video(video=video, caption=text.GENERATE_TEST_VIDEO_SUCCESS_TEXT.format(model_name, model_name_index), 
        reply_markup=video_generation_keyboards.generatedVideoKeyboard(f"generate_video|{model_name}", False))


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
async def start_save_video(call: types.CallbackQuery, state: FSMContext):
    # –ñ–¥—ë–º –ø–æ–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è —Å–ª–µ–¥—É—é—â–µ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –≤ –æ—á–µ—Ä–µ–¥–∏
    generated_video_paths = await waitStateArrayReplenishment(state, "generated_video_paths", 
    ("sent_videos_count", "saved_videos_count"))

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –º–æ–¥–µ–ª—å –≤ –æ—á–µ—Ä–µ–¥–∏
    stateData = await state.get_data()
    model_name = generated_video_paths[0]["model_name"]
    video_path = generated_video_paths[0]["video_path"]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    type_for_video_generation = stateData["type_for_video_generation"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
    video = types.FSInputFile(video_path)
    if type_for_video_generation == "test":
        # TODO: —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
        # if "video_example_index" in stateData:
        #     prefix = f"generate_video|{stateData['video_example_index']}|{model_name}"
        # else:
        #     prefix = f"generate_video|{model_name}"

        prefix = f"generate_video|{model_name}"

        await call.message.answer_video(video=video, caption=text.GENERATE_TEST_VIDEO_SUCCESS_TEXT.format(model_name), 
        reply_markup=video_generation_keyboards.generatedVideoKeyboard(prefix, False))

    elif type_for_video_generation == "work":
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –º–æ–¥–µ–ª–∏
        model_name_index = getModelNameIndex(model_name)

        await call.message.answer_video(video=video, caption=text.GENERATE_VIDEO_SUCCESS_TEXT.format(model_name, model_name_index), 
        reply_markup=video_generation_keyboards.videoCorrectnessKeyboard(model_name))


# –•–µ–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ
async def write_prompt_for_video(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    prompt = message.text
    await state.update_data(prompt_for_video=prompt)
    data = await state.get_data()
    image_url = data["image_url"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
    model_name = data["model_name_for_video_generation"]

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –º–æ–¥–µ–ª–∏
    model_name_index = getModelNameIndex(model_name)
    
    await message.answer_photo(
    photo=image_url,
    caption=text.WRITE_PROMPT_FOR_VIDEO_SUCCESS_TEXT.format(model_name, model_name_index, prompt),
    reply_markup=video_generation_keyboards.generatedVideoKeyboard(f"generate_video|{model_name}"))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ
async def handle_video_correctness_buttons(call: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∫–Ω–æ–ø–∫–∏
    temp = call.data.split("|")
    button_type = temp[1]
    model_name = temp[2]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    stateData = await state.get_data()

    # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ –ø–æ –º–æ–¥–µ–ª–∏
    for data in stateData["generated_video_paths"]:
        if data["model_name"] == model_name:
            video_path = data["video_path"]
            break

    # –ü–æ–ª—É—á–∞–µ–º id –ø–∞–ø–∫–∏ –∏ —Ç–¥
    user_id = call.from_user.id
    modelData = await getDataByModelName(model_name)
    video_folder_id = modelData["video_folder_id"]
    now = datetime.now().strftime("%Y-%m-%d")

    if button_type == "correct":
        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
        stateData = await state.get_data()
        stateData["saved_images_urls"] = [x for x in stateData["saved_images_urls"] if not (model_name in x)]
        await state.update_data(saved_images_urls=stateData["saved_images_urls"])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –º–æ–¥–µ–ª–∏
        model_name_index = getModelNameIndex(model_name)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
        message_for_edit = await editMessageOrAnswer(
        call,text.SAVE_VIDEO_PROGRESS_TEXT.format(model_name, model_name_index))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ
        if not MOCK_MODE:
            link = await saveFile(video_path, user_id, model_name, video_folder_id, now, False)
        else:
            link = MOCK_LINK_FOR_SAVE_VIDEO


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "üìπ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'"
async def start_generateVideoFromImage(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(text.SEND_IMAGE_FOR_VIDEO_GENERATION)
    await state.set_state(StartGenerationState.send_image_for_video_generation)

    # –û—á–∏—â–∞–µ–º —Å—Ç–µ–π—Ç –æ—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    # TODO: —É–±—Ä–∞—Ç—å –∏ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≥–µ–Ω–µ—Ä–∏—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ
    # await state.update_data(image_file_ids_for_videoGenerationFromImage=[])
    # await state.update_data(prompts_for_videoGenerationFromImage={})
    # await state.update_data(video_paths=[])


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å—ã–ª–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–∏—Å—ã–ª–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
async def write_prompt_for_videoGenerationFromImage(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if not message.photo:
        await message.answer(text.NO_IMAGE_FOR_VIDEO_GENERATION_ERROR_TEXT)
        return

    # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    photo = message.photo[-1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –º–∞—Å—Å–∏–≤ –≤ —Å—Ç–µ–π—Ç–µ
    stateData = await state.get_data()
    if "image_file_ids_for_videoGenerationFromImage" not in stateData:
        await state.update_data(image_file_ids_for_videoGenerationFromImage=[photo.file_id])
    else:
        stateData["image_file_ids_for_videoGenerationFromImage"].append(photo.file_id)
        await state.update_data(image_file_ids_for_videoGenerationFromImage=stateData["image_file_ids_for_videoGenerationFromImage"] + [photo.file_id])

    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
    await state.set_state(None)
    await message.answer(text.WRITE_PROMPT_FOR_VIDEO_GENERATION_FOR_IMAGE_TEXT)
    await state.set_state(StartGenerationState.write_prompt_for_videoGenerationFromImage)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def handle_prompt_for_videoGenerationFromImage(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç
    prompt = message.text

    await state.update_data(prompt_for_videoGenerationFromImage=prompt)
    data = await state.get_data()
    image_file_id = data.get("image_file_id_for_videoGenerationFromImage")

    if not image_file_id:
        await message.answer(text.NO_IMAGE_FOR_VIDEO_GENERATION_ERROR_TEXT)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    await message.answer(text.GENERATE_VIDEO_FROM_IMAGE_PROGRESS_TEXT)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ
    await generateVideoFromImage(image_file_id_index, prompt, message, state)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ"
async def handle_regenerate_video_from_image(call: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–µ–π—Ç–∞
    stateData = await state.get_data()
    image_file_id_index = int(call.data.split("|")[1])
    image_file_id = stateData["image_file_ids_for_videoGenerationFromImage"][image_file_id_index]
    prompt = stateData["prompts_for_videoGenerationFromImage"][image_file_id]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    await call.message.answer(text.GENERATE_VIDEO_FROM_IMAGE_PROGRESS_TEXT)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ
    await generateVideoFromImage(image_file_id_index, prompt, call.message, state)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ"
async def handle_save_video(call: types.CallbackQuery, state: FSMContext):
    file_id_index = call.data.split("|")[1]
    await state.update_data(current_file_id_index=file_id_index)
    await state.set_state(StartGenerationState.ask_for_model_name_for_video_generation_from_image)
    await call.message.answer(text.SAVE_VIDEO_AND_WRITE_MODEL_NAME_TEXT)


# TODO:
# # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ"
# async def handle_regenerate_video_from_image(call: types.CallbackQuery, state: FSMContext):
#     # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–µ–π—Ç–∞
#     stateData = await state.get_data()
#     image_file_id_index = int(call.data.split("|")[1])
#     image_file_id = stateData["image_file_ids_for_videoGenerationFromImage"][image_file_id_index]
#     prompt = stateData["prompts_for_videoGenerationFromImage"][image_file_id]
    
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
#     await call.message.answer(text.GENERATE_VIDEO_FROM_IMAGE_PROGRESS_TEXT)

#     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ
#     await generateVideoFromImage(image_file_id_index, prompt, call.message, state)


# # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ"
# async def handle_save_video(call: types.CallbackQuery, state: FSMContext):
#     file_id_index = call.data.split("|")[1]
#     await state.update_data(current_file_id_index=file_id_index)
#     await state.set_state(StartGenerationState.ask_for_model_name_for_video_generation_from_image)
#     await call.message.answer(text.SAVE_VIDEO_AND_WRITE_MODEL_NAME_TEXT)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
async def handle_model_name_for_video_generation_from_image(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    stateData = await state.get_data()
    # file_id_index = int(stateData["current_file_id_index"])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏
    model_name = message.text

    # –ï—Å–ª–∏ —Ç–∞–∫–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if not await getDataByModelName(model_name):
        await message.answer(text.MODEL_NOT_FOUND_TEXT)
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ
    # logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ: {stateData['video_paths']} –ø–æ –∏–Ω–¥–µ–∫—Å—É: {file_id_index}")
    # video_path = stateData["video_paths"][file_id_index]
    video_path = stateData["video_path"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ
    await state.set_state(None)
    await saveVideo(video_path, model_name, message)

    # try:
    #     # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç–µ–π—Ç—ã –æ—Ç —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    #     await state.update_data(current_file_id_index=None)

    #     # –ü–æ–ª—É—á–∞–µ–º file_id –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
    #     image_file_id = stateData["image_file_ids_for_videoGenerationFromImage"][file_id_index]
        
    #     # –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º state
    #     updated_video_paths = stateData["video_paths"]
    #     updated_video_paths.pop(file_id_index)
    #     await state.update_data(video_paths=updated_video_paths)

    #     # –£–¥–∞–ª—è–µ–º file_id –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º state
    #     updated_image_file_ids = stateData["image_file_ids_for_videoGenerationFromImage"]
    #     updated_image_file_ids.pop(file_id_index)
    #     await state.update_data(image_file_ids_for_videoGenerationFromImage=updated_image_file_ids)

    #     # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ file_id –∏ –æ–±–Ω–æ–≤–ª—è–µ–º state
    #     updated_prompts = stateData["prompts_for_videoGenerationFromImage"]
    #     updated_prompts.pop(image_file_id)
    #     await state.update_data(prompts_for_videoGenerationFromImage=updated_prompts)
            
    #     logger.info(f"–£–¥–∞–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∞—Å—Å–∏–≤–æ–≤: {updated_video_paths}, {updated_image_file_ids}, {updated_prompts}")
    # except Exception as e:
    #     logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def hand_add():
    router.callback_query.register(start_generate_video, lambda call: call.data.startswith("start_generate_video"))

    router.callback_query.register(handle_video_generation_mode_buttons, lambda call: call.data.startswith("generate_video_mode"))

    router.callback_query.register(handle_video_example_buttons, lambda call: call.data.startswith("generate_video"))

    router.callback_query.register(start_save_video, lambda call: call.data == "start_save_video")

    router.message.register(write_prompt_for_video, StateFilter(StartGenerationState.write_prompt_for_video))

    router.callback_query.register(handle_video_correctness_buttons, 
    lambda call: call.data.startswith("video_correctness"))

    router.callback_query.register(
        start_generateVideoFromImage,
        lambda call: call.data == "generateVideoFromImage",
    )

    router.message.register(write_prompt_for_videoGenerationFromImage, 
    StateFilter(StartGenerationState.send_image_for_video_generation))

    router.message.register(handle_prompt_for_videoGenerationFromImage, StateFilter(StartGenerationState.write_prompt_for_videoGenerationFromImage))

    # TODO:
    # router.callback_query.register(handle_regenerate_video_from_image, 
    # lambda call: call.data.startswith("regenerate_video_from_image"))

    # router.callback_query.register(handle_save_video, lambda call: call.data.startswith("save_video"))

    router.message.register(handle_model_name_for_video_generation_from_image, StateFilter(StartGenerationState.ask_for_model_name_for_video_generation_from_image))
