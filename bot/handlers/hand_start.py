from utils.generateImages.dataArray.getDataArrayBySettingNumber import getDataArrayBySettingNumber
from utils.videos.generateVideo import generateVideo
from utils.facefusion.facefusion_swap import facefusion_swap
from aiogram import types
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from utils.videoExamples.getVideoExampleDataByIndex import getVideoExampleDataByIndex
from utils.saveImages.getFolderDataByID import getFolderDataByID
from utils.generateImages.dataArray.getDataArrayWithRootPrompt import getDataArrayWithRootPrompt
from utils.saveFile import saveFile
from utils.generateImages.generateImage import generateByData, generateTestImagesByAllSettings
from keyboards.user.keyboards import generationsTypeKeyboard, selectSettingKeyboard, generateVideoKeyboard, videoCorrectnessKeyboard, videoExampleKeyboard
from utils import text
from states import UserState
from utils.generateImages.generateImages import generateImages
from logger import logger
from InstanceBot import bot
import traceback
from utils.videoExamples.getVideoExamplesData import getVideoExamplesData
from InstanceBot import router
import os
import asyncio


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –≤–≤–æ–¥–µ "/start"
async def start(message: types.Message, state: FSMContext):
    await state.clear()

    await message.answer(
        text.START_TEXT, reply_markup=generationsTypeKeyboard()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
async def choose_generations_type(
    call: types.CallbackQuery, state: FSMContext
):
    generations_type = call.data.split("|")[1]
    is_test_generation = generations_type == "test"
    await state.update_data(generations_type=generations_type)

    await call.message.edit_text(
        text.GET_GENERATIONS_SUCCESS_TEXT,
        reply_markup=selectSettingKeyboard(is_test_generation),
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
async def choose_setting(call: types.CallbackQuery, state: FSMContext):
    setting_number = call.data.split("|")[1]
    await state.update_data(setting_number=setting_number)
    await call.message.edit_text(
        text.GET_SETTINGS_WITH_TEST_GENERATIONS_SUCCESS_TEXT
    )
    await state.set_state(UserState.write_prompt_for_image)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞
async def write_prompt(message: types.Message, state: FSMContext):
    prompt = message.text
    user_id = message.from_user.id
    data = await state.get_data()
    is_test_generation = data["generations_type"] == "test"
    setting_number = data["setting_number"]
    message_for_edit = await message.answer(
        text.TEST_GENERATION_GET_PROMPT_SUCCESS_TEXT
        if is_test_generation
        else text.GET_PROMPT_SUCCESS_TEXT
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        if is_test_generation:
            if setting_number == "all":
                result = await generateTestImagesByAllSettings(message, state, user_id, is_test_generation, message_for_edit, False)
            else:
                # –ü—Ä–∏–±–∞–≤–ª—è–µ–º –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–æ–º–ø—Ç
                dataArray = getDataArrayWithRootPrompt(int(setting_number), prompt)
                dataJSON = dataArray[0]["json"]
                model_name = dataArray[0]["model_name"]
                picture_folder_id = dataArray[0]["picture_folder_id"]
                video_folder_id = dataArray[0]["video_folder_id"]
                result = [await generateByData(dataJSON, model_name, message, state, user_id, setting_number, picture_folder_id, video_folder_id, is_test_generation, False)]
        else:
            result = await generateImages(int(setting_number), prompt, message_for_edit, state, user_id, is_test_generation)

        if result:
            await message.answer(text.GENERATE_IMAGE_SUCCESS_TEXT)
        else:
            raise Exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    except Exception as e:
        traceback.print_exc()
        await message.answer(text.GENERATION_ERROR_TEXT)
        await state.clear()
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def select_image(call: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = call.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ä–∞–±–æ—Ç—ã –∏ –∏–Ω–¥–µ–∫—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    model_name = call.data.split("|")[1]
    image_index = int(call.data.split("|")[2])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–µ–π—Ç–∞
    data = await state.get_data()
    setting_number = int(data["setting_number"])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–æ–¥–µ–ª–∏
    dataArray = getDataArrayBySettingNumber(setting_number)
    data = next((data for data in dataArray if data["model_name"] == model_name), None)
    picture_folder_id = data["picture_folder_id"]
    video_folder_id = data["video_folder_id"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ id –ø–∞–ø–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ
    await state.update_data(model_name=model_name)
    await state.update_data(video_folder_id=video_folder_id)

    # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏
    await call.message.edit_text(text.FACE_SWAP_PROGRESS_TEXT.format(image_index))

    # –ó–∞–º–µ–Ω—è–µ–º –ª–∏—Ü–æ –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å, –Ω–∞ –ª–∏—Ü–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    faceswap_target_path = f"images/temp/{model_name}_{user_id}/{image_index}.jpg"
    faceswap_source_path = f"images/faceswap/{model_name}.jpg"
    logger.info(f"–ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –∑–∞–º–µ–Ω—ã –ª–∏—Ü–∞: {faceswap_target_path}")
    logger.info(f"–ü—É—Ç—å –∫ —Ü–µ–ª–µ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –∑–∞–º–µ–Ω—ã –ª–∏—Ü–∞: {faceswap_source_path}")

    max_attempts = 5
    attempt = 0
    while True:
        attempt += 1
        try:
            result_path = await facefusion_swap(faceswap_source_path, faceswap_target_path)
            break
        except Exception as e:
            traceback.print_exc()
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –ª–∏—Ü–∞: {e}")
            if attempt >= max_attempts:
                await call.message.answer(text.FACE_SWAP_ERROR_TEXT)
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ª–∏—Ü–∞ –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
            await asyncio.sleep(20)

    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–º–µ–Ω—ã –ª–∏—Ü–∞: {result_path}")

    # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏
    await call.message.edit_text(text.SAVE_IMAGE_PROGRESS_TEXT.format(image_index))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_index = int(image_index) - 1
    link = await saveFile(result_path, user_id, model_name, picture_folder_id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–∏
    folder = getFolderDataByID(picture_folder_id)
    parent_folder_id = folder['parents'][0]
    parent_folder = getFolderDataByID(parent_folder_id)

    logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ –ø–æ id {picture_folder_id}: {folder}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await call.message.edit_text(text.SAVE_IMAGES_SUCCESS_TEXT
    .format(link, model_name, parent_folder['webViewLink']), reply_markup=generateVideoKeyboard())

    # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
    try:    
        mediagroup_messages_ids = data[f"mediagroup_messages_ids_{model_name}"]
        chat_id = call.message.chat.id
        for message_id in mediagroup_messages_ids:
            await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except:
        pass

    # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–º–µ–Ω—ë–Ω–Ω—ã–º –ª–∏—Ü–æ–º
    os.remove(result_path)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üìπ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ"
async def start_generate_video(call: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_id = call.from_user.id
    message_id = call.message.message_id

    await bot.delete_message(user_id, message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–æ–≤
    await call.message.answer(text.SELECT_VIDEO_EXAMPLE_TEXT)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ-—à–∞–±–ª–æ–Ω—ã —Å –∏—Ö –ø—Ä–æ–º–ø—Ç–∞–º–∏
    templates_examples = await getVideoExamplesData()

    # –í—ã–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä—ã –≤–º–µ—Å—Ç–µ —Å –∏—Ö –ø—Ä–æ–º–ø—Ç–∞–º–∏
    for index, value in templates_examples.items():
        video = types.FSInputFile(value["file_path"])
        await call.message.answer_video(
            video=video,
            caption=value["prompt"],
            reply_markup=videoExampleKeyboard(index)
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–æ–º
async def handle_video_example_buttons(call: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞ –∏ —Ç–∏–ø –∫–Ω–æ–ø–∫–∏
    temp = call.data.split("|")
    index = int(temp[1])
    button_type = temp[2]

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    data = await state.get_data()
    model_name = data["model_name"]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞ –ø–æ –µ–≥–æ –∏–Ω–¥–µ–∫—Å—É
    video_example_data = await getVideoExampleDataByIndex(index)

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∞ –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –±–µ—Ä–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞ 
    if "prompt_for_video" in data:
        custom_prompt = data["prompt_for_video"]
    else:
        custom_prompt = None
    video_example_prompt = custom_prompt if custom_prompt else video_example_data["prompt"]

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä—É
    video_example_file_path = video_example_data["file_path"]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ
    video_url = await generateVideo(video_example_prompt, video_example_file_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –≤ —Å—Ç–µ–π—Ç
    await state.update_data(video_url=video_url)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
    if button_type == "test":
        video = types.FSInputFile(video_url)
        await call.message.answer_video(video=video, caption=text.GENERATE_TEST_VIDEO_SUCCESS_TEXT, 
        reply_markup=videoExampleKeyboard(index, False))

    elif button_type == "work":
        video = types.FSInputFile(video_url)
        await call.message.answer_video(video=video, caption=text.GENERATE_VIDEO_SUCCESS_TEXT.format(model_name), 
        reply_markup=videoCorrectnessKeyboard())

    elif button_type == "write_prompt":
        await state.update_data(video_example_file_path=video_example_file_path)
        await state.update_data(video_example_index=index)
        await call.message.answer(text.WRITE_PROMPT_FOR_VIDEO_TEXT)
        await state.set_state(UserState.write_prompt_for_video)


# –•–µ–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ
async def write_prompt_for_video(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    prompt = message.text
    await state.update_data(prompt_for_video=prompt)
    data = await state.get_data()
    video_example_file = data["video_example_file"]
    index = data["video_example_index"]

    await message.answer_video(video_example_file, 
    caption=text.WRITE_PROMPT_FOR_VIDEO_SUCCESS_TEXT.format(prompt),
    reply_markup=videoExampleKeyboard(index, with_write_prompt=False))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ
async def handle_video_correctness_buttons(call: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∫–Ω–æ–ø–∫–∏
    temp = call.data.split("|")
    button_type = temp[1]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    video_url = data["video_url"]
    user_id = call.from_user.id
    model_name = data["model_name"]
    video_folder_id = data["video_folder_id"]

    if button_type == "correct":
        link = await saveFile(video_url, user_id, model_name, video_folder_id, False)

    elif button_type == "incorrect":
        pass


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def hand_add():
    router.message.register(start, StateFilter("*"), CommandStart())

    router.callback_query.register(
        choose_generations_type,
        lambda call: call.data.startswith("generations_type"),
    )

    router.callback_query.register(
        choose_setting, lambda call: call.data.startswith("select_setting")
    )

    router.message.register(write_prompt, StateFilter(UserState.write_prompt_for_image))

    router.callback_query.register(select_image, lambda call: call.data.startswith("select_image"))

    router.callback_query.register(start_generate_video, lambda call: call.data == "generate_video")

    router.callback_query.register(handle_video_example_buttons, lambda call: call.data.startswith("generate_video"))

    router.message.register(write_prompt_for_video, StateFilter(UserState.write_prompt_for_video))

    router.callback_query.register(handle_video_correctness_buttons, 
    lambda call: call.data.startswith("video_correctness"))