from utils.handlers.generateImagesInHandler import generateImagesInHandler
from utils.generateImages.dataArray.getDataByModelName import getDataByModelName
from utils.generateImages.dataArray.getNextModel import getNextModel
from utils.generateImages.dataArray.getAllDataArrays import getAllDataArrays
from utils import retryOperation
from utils.generateImages.dataArray.getDataArrayBySettingNumber import getDataArrayBySettingNumber
from utils.videos.generateVideo import generateVideo
from utils.facefusion.facefusion_swap import facefusion_swap
from aiogram import types
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from utils.videoExamples.getVideoExampleDataByIndex import getVideoExampleDataByIndex
from utils.saveImages.getFolderDataByID import getFolderDataByID
from utils.files.saveFile import saveFile
from utils.generateImages.generateImageBlock import generateImageBlock
from keyboards.user import keyboards
from utils import text
from states import UserState
from logger import logger
from InstanceBot import bot
import traceback
from utils.videoExamples.getVideoExamplesData import getVideoExamplesData
from InstanceBot import router
import os
from datetime import datetime
from aiogram.filters import Command
from utils.generateImages.dataArray.getModelNameIndex import getModelNameIndex
from utils.generateImages.upscaleImage import upscaleImage
from config import TEMP_FOLDER_PATH
from PIL import Image
from utils.generateImages.ImageTobase64 import imageToBase64
from utils.generateImages.base64ToImage import base64ToImage
import asyncio


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –≤–≤–æ–¥–µ "/start"
async def start(message: types.Message, state: FSMContext):
    await state.clear()

    await message.answer(
        text.START_TEXT, reply_markup=keyboards.generationsTypeKeyboard()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
async def choose_generations_type(
    call: types.CallbackQuery, state: FSMContext
):
    generations_type = call.data.split("|")[1]
    await state.update_data(generations_type=generations_type)

    try:
        prompt_exist = bool(call.data.split("|")[2])
    except:
        prompt_exist = False
    
    await state.update_data(prompt_exist=prompt_exist)

    await call.message.edit_text(
        text.GET_GENERATIONS_SUCCESS_TEXT,
        reply_markup=keyboards.selectSettingKeyboard(),
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
async def choose_setting(call: types.CallbackQuery, state: FSMContext):
    setting_number = call.data.split("|")[1]
    await state.update_data(setting_number=setting_number)
    data = await state.get_data()
    generations_type = data["generations_type"]
    prompt_exist = data["prompt_exist"]

    if generations_type == "test":
        if prompt_exist:
            prompt = data["prompt"]
            user_id = call.from_user.id
            is_test_generation = generations_type == "test"
            setting_number = setting_number

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await bot.delete_message(user_id, call.message.message_id)

            await generateImagesInHandler(prompt, call.message, state, user_id, is_test_generation, setting_number)

            await state.update_data(prompt_exist=False)
        else:
            await call.message.edit_text(
                text.GET_SETTINGS_SUCCESS_TEXT
            )
            await state.set_state(UserState.write_prompt_for_images)

    elif generations_type == "work":
        await call.message.edit_text(
            text.CHOOSE_WRITE_PROMPT_TYPE_SUCCESS_TEXT,
            reply_markup=keyboards.writePromptTypeKeyboard()
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
async def choose_writePrompt_type(call: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    writePrompt_type = call.data.split("|")[1]
    await state.update_data(writePrompt_type=writePrompt_type)

    if writePrompt_type == "one":
        await call.message.edit_text(text.GET_ONE_PROMPT_GENERATION_SUCCESS_TEXT, reply_markup=keyboards.onePromptGenerationChooseTypeKeyboard())
    else:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        stateData = await state.get_data()
        setting_number = stateData["setting_number"]

        if setting_number == "all":
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            dataArrays = getAllDataArrays()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            model_name = dataArrays[0][0]["model_name"]
            await state.update_data(current_setting_number_for_unique_prompt=1)
            await state.set_state(UserState.write_prompt_for_model)
        else:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
            dataArray = getDataArrayBySettingNumber(int(setting_number))
            model_name = dataArray[0]["model_name"]
            await state.update_data(current_setting_number_for_unique_prompt=int(setting_number))

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –º–æ–¥–µ–ª–∏
        model_name_index = getModelNameIndex(model_name)

        await call.message.edit_text(text.WRITE_PROMPT_FOR_MODEL_START_TEXT.format(model_name, model_name_index))
        await state.update_data(current_model_for_unique_prompt=model_name)
        await state.set_state(UserState.write_prompt_for_model)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –æ–¥–Ω–∏–º –ø—Ä–æ–º–ø—Ç–æ–º
async def chooseOnePromptGenerationType(call: types.CallbackQuery, state: FSMContext):
    one_prompt_generation_type = call.data.split("|")[1]

    if one_prompt_generation_type == "static":
        await call.message.edit_text(text.GET_STATIC_PROMPT_TYPE_SUCCESS_TEXT)
        await state.set_state(UserState.write_prompt_for_images)

    elif one_prompt_generation_type == "random":
        await call.message.edit_text(text.GET_RANDOM_PROMPT_TYPE_SUCCESS_TEXT, 
        reply_markup=keyboards.randomizerKeyboard([]))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞
async def handle_randomizer_buttons(call: types.CallbackQuery, state: FSMContext):
    variable_name = call.data.split("|")[1]
    
    # –ï—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é"
    if variable_name == "add_variable":
        await call.message.edit_text(text.ADD_VARIABLE_FOR_RANDOMIZER_TEXT)
        await state.set_state(UserState.write_variable_for_randomizer)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞
async def write_variable_for_randomizer(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    variable_name = message.text

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å—Ç–µ–π—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
    if "variable_names_for_randomizer" not in data:
        await state.update_data(variable_names_for_randomizer=[variable_name])
    else:
        data["variable_names_for_randomizer"].append(variable_name)
        await state.update_data(variable_names_for_randomizer=data["variable_names_for_randomizer"])

    await message.answer(text.WRITE_VARIABLE_FOR_RANDOMIZER_TEXT, 
    reply_markup=keyboards.stopInputValuesForVariableKeyboard())
    await state.set_state(UserState.write_value_for_variable_for_randomizer)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞
async def write_value_for_variable_for_randomizer(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    all_variable_names = data["variable_names_for_randomizer"]
    variable_name = all_variable_names[-1]
    variable_name_values = f"randomizer_{variable_name}_values"

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "üö´ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π", —Ç–æ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    if message.text == "üö´ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π":
        await message.answer(text.RANDOMIZER_MENU_TEXT, 
        reply_markup=keyboards.randomizerKeyboard(all_variable_names))
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ
    value = message.text
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –µ—â—ë –Ω–µ—Ç –≤ —Å—Ç–µ–π—Ç–µ, —Ç–æ —Å–æ–∑–¥–∞—ë–º –µ—ë
    if variable_name_values not in data:
        await state.update_data(**{variable_name_values: [value]})
    else: # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É–∂–µ –µ—Å—Ç—å –≤ —Å—Ç–µ–π—Ç–µ, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
        data[variable_name_values].append(value)
        await state.update_data(**{variable_name_values: data[variable_name_values]})

    await message.answer(text.WRITE_VALUE_FOR_VARIABLE_FOR_RANDOMIZER_TEXT.format(variable_name))
    await state.set_state(UserState.write_value_for_variable_for_randomizer)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞
async def write_prompt(message: types.Message, state: FSMContext):
    prompt = message.text
    user_id = message.from_user.id
    data = await state.get_data()
    is_test_generation = data["generations_type"] == "test"
    setting_number = data["setting_number"]
    await state.update_data(prompt=prompt)

    await generateImagesInHandler(prompt, message, state, user_id, is_test_generation, setting_number)
            

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
async def write_prompt_for_model(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    prompt = message.text
    model_name = data["current_model_for_unique_prompt"]
    setting_number = data["setting_number"]
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –º–æ–¥–µ–ª–∏
    model_name_index = getModelNameIndex(model_name)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    message_for_edit = await message.answer(text.GENERATE_IMAGE_PROGRESS_TEXT.format(model_name, model_name_index))

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–æ–¥–µ–ª–∏
    data = await getDataByModelName(model_name)

    # –ü—Ä–∏–±–∞–≤–ª—è–µ–º –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–æ–º–ø—Ç
    data["json"]['input']['prompt'] += " " + prompt

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await generateImageBlock(data["json"], model_name, message_for_edit, state, user_id, setting_number, False)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å
    next_model = await getNextModel(model_name, setting_number, state)

    logger.info(f"–°–ª–µ–¥—É—é—â–∞—è –º–æ–¥–µ–ª—å: {next_model}")

    # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    if not next_model:
        await message.answer(text.GENERATE_IMAGE_SUCCESS_TEXT)
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ–ª–∏
    next_model_index = getModelNameIndex(next_model)

    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ–ª–∏
    await message.answer(text.WRITE_PROMPT_FOR_MODEL_TEXT.format(next_model, next_model_index), 
    reply_markup=keyboards.confirmWriteUniquePromptForNextModelKeyboard())
    await state.update_data(current_model_for_unique_prompt=next_model)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "‚úÖ –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–º–ø—Ç" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ–ª–∏
async def confirm_write_unique_prompt_for_next_model(call: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    next_model = data["current_model_for_unique_prompt"]

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ–ª–∏
    next_model_index = getModelNameIndex(next_model)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞
    await call.message.edit_text(text.WRITE_UNIQUE_PROMPT_FOR_MODEL_TEXT.format(next_model, next_model_index))
    await state.set_state(UserState.write_prompt_for_model)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def select_image(call: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = call.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ä–∞–±–æ—Ç—ã –∏ –∏–Ω–¥–µ–∫—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    model_name = call.data.split("|")[1]
    setting_number = call.data.split("|")[2]
    image_index = call.data.split("|")[3]

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –º–æ–¥–µ–ª–∏
    model_name_index = getModelNameIndex(model_name)

    # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–≤–µ–Ω "regenerate", —Ç–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if image_index == "regenerate":
        stateData = await state.get_data()
        is_test_generation = stateData["generations_type"] == "test"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await call.message.edit_text(text.REGENERATE_IMAGE_TEXT.format(model_name, model_name_index))

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–æ–¥–µ–ª–∏
        data = await getDataByModelName(model_name)
        return await generateImageBlock(data["json"], model_name, call.message, state, user_id, setting_number, is_test_generation, False)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–æ–¥–µ–ª–∏
    dataArray = getDataArrayBySettingNumber(int(setting_number))
    data = next((data for data in dataArray if data["model_name"] == model_name), None)
    picture_folder_id = data["picture_folder_id"]
    video_folder_id = data["video_folder_id"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ id –ø–∞–ø–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ
    await state.update_data(model_name=model_name)
    await state.update_data(video_folder_id=video_folder_id)

    # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ –Ω–∞—á–∞–ª–µ upscale
    await call.message.edit_text(text.UPSCALE_IMAGE_PROGRESS_TEXT.format(image_index, model_name, model_name_index))

    # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏
    image_path = f"{TEMP_FOLDER_PATH}/{model_name}_{user_id}/{image_index}.jpg"
    image = Image.open(image_path)
    image_base64 = imageToBase64(image)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–≥–∞—Ç–∏–≤ –ø—Ä–æ–º–ø—Ç
    negative_prompt = data["json"]["input"]["negative_prompt"]
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å   
    base_model = data["json"]["input"]["base_model_name"]
    
    # –î–µ–ª–∞–µ–º upscale –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    images_output_base64 = await upscaleImage(image_base64, negative_prompt, base_model)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —ç—Ç–æ–º—É –∂–µ –ø—É—Ç–∏
    await base64ToImage(images_output_base64, model_name, int(image_index) - 1, user_id, False)

    # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∑–∞–º–µ–Ω—É –ª–∏—Ü–∞
    await call.message.edit_text(text.FACE_SWAP_WAIT_TEXT.format(model_name, model_name_index))

    # –ó–∞–º–µ–Ω—è–µ–º –ª–∏—Ü–æ –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å, –Ω–∞ –ª–∏—Ü–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    faceswap_target_path = f"images/temp/{model_name}_{user_id}/{image_index}.jpg"
    faceswap_source_path = f"images/faceswap/{model_name}.jpg"
    logger.info(f"–ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –∑–∞–º–µ–Ω—ã –ª–∏—Ü–∞: {faceswap_target_path}")
    logger.info(f"–ü—É—Ç—å –∫ —Ü–µ–ª–µ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –∑–∞–º–µ–Ω—ã –ª–∏—Ü–∞: {faceswap_source_path}")

    # –ï—Å–ª–∏ —Å—Ç–µ–π—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –∏ –∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è faceswap –µ—â—ë –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
    stateData = await state.get_data()
    if "faceswap_generate_models" not in stateData:
        await state.update_data(faceswap_generate_models=[model_name])
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–µ–π—Ç –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è faceswap
        stateData["faceswap_generate_models"].append(model_name)
        await state.update_data(faceswap_generate_models=stateData["faceswap_generate_models"])

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª, —á—Ç–æ –ø–æ–∫–∞ –æ—á–µ—Ä–µ–¥—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–µ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è, —Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–µ –Ω–∞—á–∏–Ω–∞–µ–º
    while True:
        stateData = await state.get_data()
        faceswap_generate_models = stateData["faceswap_generate_models"]

        logger.info(f"–°–ø–∏—Å–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –∑–∞–º–µ–Ω—ã –ª–∏—Ü–∞: {faceswap_generate_models}")

        # –ï—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞—Å—Ç–∞–ª–∞ –æ—á–µ—Ä–µ–¥—å —ç—Ç–æ–π –º–æ–¥–µ–ª–∏, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        if model_name == faceswap_generate_models[0]:
            await call.message.edit_text(text.FACE_SWAP_PROGRESS_TEXT.format(image_index, model_name, model_name_index))
            
            try:
                result_path = await retryOperation(facefusion_swap, 10, 1.5, faceswap_source_path, faceswap_target_path)
            except Exception as e:
                result_path = None
                logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –ª–∏—Ü–∞: {e}")
                await call.message.answer(text.FACE_SWAP_ERROR_TEXT.format(model_name, model_name_index))
                break

            break

        await asyncio.sleep(10)

    # –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª—è–µ–º –º–æ–¥–µ–ª—å –∏–∑ —Å—Ç–µ–π—Ç–∞
    stateData = await state.get_data()
    stateData["faceswap_generate_models"].remove(model_name)
    await state.update_data(faceswap_models=stateData["faceswap_generate_models"])

    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–º–µ–Ω—ã –ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    if not result_path:
        return

    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–º–µ–Ω—ã –ª–∏—Ü–∞: {result_path}")

    # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏
    await call.message.edit_text(text.SAVE_IMAGE_PROGRESS_TEXT.format(image_index, model_name, model_name_index))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_index = int(image_index) - 1
    now = datetime.now().strftime("%Y-%m-%d")
    link = await saveFile(result_path, user_id, model_name, picture_folder_id, now)

    if not link:
        await call.message.answer(text.SAVE_FILE_ERROR_TEXT)
        return

    await state.update_data(image_url=link)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–∏
    folder = getFolderDataByID(picture_folder_id)
    parent_folder_id = folder['parents'][0]
    parent_folder = getFolderDataByID(parent_folder_id)

    logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ –ø–æ id {picture_folder_id}: {folder}")

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.delete_message(user_id, call.message.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await call.message.answer(text.SAVE_IMAGES_SUCCESS_TEXT
    .format(link, model_name, parent_folder['webViewLink'], model_name_index), reply_markup=keyboards.generateVideoKeyboard(model_name))

    # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
    stateData = await state.get_data()
    try:    
        mediagroup_messages_ids = stateData[f"mediagroup_messages_ids_{model_name}"]
        chat_id = call.message.chat.id
        for message_id in mediagroup_messages_ids:
            await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞: {e}")

    # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–º–µ–Ω—ë–Ω–Ω—ã–º –ª–∏—Ü–æ–º
    os.remove(result_path)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üìπ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ"
async def start_generate_video(call: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    model_name = call.data.split("|")[1]

    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_id = call.from_user.id
    message_id = call.message.message_id

    await bot.delete_message(user_id, message_id)

    # –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ –∏–∑ –ø–∞–ø–∫–∏ temp/videos, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    stateData = await state.get_data()
    if "video_path" in stateData:
        os.remove(stateData["video_path"])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –º–æ–¥–µ–ª–∏
    model_name_index = getModelNameIndex(model_name)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–æ–≤
    select_video_example_message = await call.message.answer(text.SELECT_VIDEO_EXAMPLE_TEXT.format(model_name, model_name_index))

    await state.update_data(select_video_example_message_id=select_video_example_message.message_id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ-—à–∞–±–ª–æ–Ω—ã —Å –∏—Ö –ø—Ä–æ–º–ø—Ç–∞–º–∏
    templates_examples = await getVideoExamplesData()

    # –í—ã–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä—ã –≤–º–µ—Å—Ç–µ —Å –∏—Ö –ø—Ä–æ–º–ø—Ç–∞–º–∏
    video_examples_messages_ids = []
    for index, value in templates_examples.items():
        video_example_message = await call.message.answer_video(
            video=value["file_id"],
            caption=text.VIDEO_EXAMPLE_TEXT.format(model_name, model_name_index, value["prompt"]),
            reply_markup=keyboards.videoExampleKeyboard(index, model_name)
        )
        video_examples_messages_ids.append(video_example_message.message_id)
        await state.update_data(video_examples_messages_ids=video_examples_messages_ids)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–æ–º
async def handle_video_example_buttons(call: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞ –∏ —Ç–∏–ø –∫–Ω–æ–ø–∫–∏
    temp = call.data.split("|")
    index = int(temp[1])
    model_name = temp[2]
    button_type = temp[3]
    user_id = call.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ url –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    data = await state.get_data()
    image_url = data["image_url"]

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞
    try:
        await bot.delete_message(user_id, int(data["select_video_example_message_id"]))
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å id {data['select_video_example_message_id']}: {e}")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞ –ø–æ –µ–≥–æ –∏–Ω–¥–µ–∫—Å—É
    video_example_data = await getVideoExampleDataByIndex(index)

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∞ –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –±–µ—Ä–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞ 
    if "prompt_for_video" in data:
        custom_prompt = data["prompt_for_video"]
    else:
        custom_prompt = None
    video_example_prompt = custom_prompt if custom_prompt else video_example_data["prompt"]

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä—É
    video_example_file_id = video_example_data["file_id"]
    await state.update_data(video_example_file_id=video_example_file_id)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä–∞–º–∏
    video_examples_messages_ids = data["video_examples_messages_ids"]
    for message_id in video_examples_messages_ids:
        try:
            await bot.delete_message(user_id, int(message_id))
        except Exception as e:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å id {message_id}: {e}")
            
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await bot.delete_message(user_id, call.message.message_id)
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å id {call.message.message_id}: {e}")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –º–æ–¥–µ–ª–∏
    model_name_index = getModelNameIndex(model_name)

    # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–º–ø—Ç", —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    if button_type == "write_prompt":
        await state.update_data(video_example_file_id=video_example_file_id)
        await state.update_data(video_example_index=index)
        await state.update_data(model_name=model_name)
        await call.message.answer(text.WRITE_PROMPT_FOR_VIDEO_TEXT.format(model_name, model_name_index))
        await state.set_state(UserState.write_prompt_for_video)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ
    message_for_delete = await call.message.answer(text.GENERATE_VIDEO_PROGRESS_TEXT.format(model_name, model_name_index))

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ
    try:
        video_path = await retryOperation(generateVideo, 10, 1.5, video_example_prompt, image_url)
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ
        await bot.delete_message(user_id, message_for_delete.message_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        traceback.print_exc()
        await call.message.answer(text.GENERATE_VIDEO_ERROR_TEXT.format(model_name, e))
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}: {e}")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –≤ —Å—Ç–µ–π—Ç
    await state.update_data(video_path=video_path)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ
    await bot.delete_message(user_id, message_for_delete.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
    video = types.FSInputFile(video_path)
    if button_type == "test":
        await call.message.answer_video(video=video, caption=text.GENERATE_TEST_VIDEO_SUCCESS_TEXT.format(model_name), 
        reply_markup=keyboards.videoExampleKeyboard(index, model_name, False))

    elif button_type == "work":
        await call.message.answer_video(video=video, caption=text.GENERATE_VIDEO_SUCCESS_TEXT.format(model_name, model_name_index), 
        reply_markup=keyboards.videoCorrectnessKeyboard(model_name))


# –•–µ–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ
async def write_prompt_for_video(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    prompt = message.text
    await state.update_data(prompt_for_video=prompt)
    data = await state.get_data()
    video_example_file_id = data["video_example_file_id"]
    index = data["video_example_index"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
    await message.answer_video(video_example_file_id, 
    caption=text.WRITE_PROMPT_FOR_VIDEO_SUCCESS_TEXT.format(data["model_name"], prompt),
    reply_markup=keyboards.videoExampleKeyboard(index, data["model_name"], with_write_prompt=False))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ
async def handle_video_correctness_buttons(call: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∫–Ω–æ–ø–∫–∏
    temp = call.data.split("|")
    button_type = temp[1]
    model_name = temp[2]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    video_path = data["video_path"]
    user_id = call.from_user.id
    video_folder_id = data["video_folder_id"]
    now = datetime.now().strftime("%Y-%m-%d")

    if button_type == "correct":
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.delete_message(user_id, call.message.message_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
        message_for_edit = await call.message.answer(text.SAVE_VIDEO_PROGRESS_TEXT.format(model_name, model_name_index))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ
        link = await saveFile(video_path, user_id, model_name, video_folder_id, now, False)

        if not link:
            await call.message.answer(text.SAVE_FILE_ERROR_TEXT)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–∏
        folder = getFolderDataByID(video_folder_id)
        parent_folder_id = folder['parents'][0]
        parent_folder = getFolderDataByID(parent_folder_id)

        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ –ø–æ id {video_folder_id}: {folder}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ
        await bot.delete_message(user_id, message_for_edit.message_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –º–æ–¥–µ–ª–∏
        model_name_index = getModelNameIndex(model_name)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ
        await message_for_edit.answer(text.SAVE_VIDEO_SUCCESS_TEXT
        .format(link, model_name, parent_folder['webViewLink'], model_name_index))

        # –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ –∏–∑ –ø–∞–ø–∫–∏ temp/videos
        os.remove(video_path)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stop   
async def stop_generation(message: types.Message, state: FSMContext):
    await state.update_data(stop_generation=True)
    await message.answer(text.STOP_GENERATION_TEXT)


# DEV: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_id –≤–∏–¥–µ–æ –í Telegram
# async def get_file_id(message: types.Message):
#     await message.answer(message.video.file_id)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def hand_add():
    router.message.register(start, StateFilter("*"), CommandStart())

    router.message.register(stop_generation, Command("stop"))

    router.callback_query.register(
        choose_generations_type,
        lambda call: call.data.startswith("generations_type"),
    )

    router.callback_query.register(
        choose_setting, lambda call: call.data.startswith("select_setting")
    )

    router.callback_query.register(
        choose_writePrompt_type, lambda call: call.data.startswith("write_prompt_type")
    )

    router.callback_query.register(
        chooseOnePromptGenerationType, lambda call: call.data.startswith("one_prompt_generation_type")
    )

    router.callback_query.register(handle_randomizer_buttons, lambda call: call.data.startswith("randomizer"))

    router.message.register(write_variable_for_randomizer, StateFilter(UserState.write_variable_for_randomizer))

    router.message.register(write_value_for_variable_for_randomizer, StateFilter(UserState.write_value_for_variable_for_randomizer))

    router.message.register(write_prompt, StateFilter(UserState.write_prompt_for_images))

    router.message.register(write_prompt_for_model, StateFilter(UserState.write_prompt_for_model))

    router.callback_query.register(confirm_write_unique_prompt_for_next_model, lambda call: call.data.startswith("confirm_write_unique_prompt_for_next_model"))

    router.callback_query.register(select_image, lambda call: call.data.startswith("select_image"))

    router.callback_query.register(start_generate_video, lambda call: call.data.startswith("start_generate_video"))

    router.callback_query.register(handle_video_example_buttons, lambda call: call.data.startswith("generate_video"))

    router.message.register(write_prompt_for_video, StateFilter(UserState.write_prompt_for_video))

    router.callback_query.register(handle_video_correctness_buttons, 
    lambda call: call.data.startswith("video_correctness"))

    # DEV: –ü–æ–ª—É—á–µ–Ω–∏–µ file_id –≤–∏–¥–µ–æ
    # router.message.register(get_file_id)