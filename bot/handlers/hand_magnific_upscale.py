

import os

from aiogram import types
from aiogram.fsm.context import FSMContext

from bot.factory.magnific_task_factory import get_magnific_task_factory
from bot.helpers import text
from bot.helpers.handlers.startGeneration.image_processes.process_save_image import (
    process_save_image,
)
from bot.InstanceBot import magnific_upscale_router
from bot.logger import logger
from bot.utils.file_validation import (
    FileValidationError,
    validate_image_for_magnific,
)
from bot.utils.googleDrive.files import downloadFromGoogleDrive
from bot.utils.googleDrive.files.getGoogleDriveFileID import (
    getGoogleDriveFileID,
)
from bot.utils.handlers.getDataInDictsArray import getDataInDictsArray
from bot.utils.handlers.messages.rate_limiter_for_edit_message import (
    safe_edit_message,
)
from bot.utils.handlers.messages.rate_limiter_for_send_message import (
    safe_send_message,
)
from bot.utils.images.resize_image import resize_image


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "ü™Ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Magnific Upscaler"
async def start_magnific_upscale(call: types.CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
    await call.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Magnific Upscaler
    message_for_edit = await safe_send_message(
        text.RESIZE_IMAGE_TEXT,
        call,
    )

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    model_name = call.data.split("|")[1]
    image_index = int(call.data.split("|")[2])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–µ–π—Ç–∞
    state_data = await state.get_data()
    saved_images_urls = state_data.get("saved_images_urls", [])

    logger.info(
        f"–ü—Ä–æ–∏–∑–≤–æ–∂—É –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É {image_index} –∏ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏ {model_name} –≤ –º–∞—Å—Å–∏–≤–µ: {saved_images_urls}",
    )

    image_url = await getDataInDictsArray(
        saved_images_urls,
        model_name,
        image_index,
    )

    if not image_url:
        await safe_send_message(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            call.message,
        )
        return

    logger.info(f"URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è Magnific Upscaler: {image_url}")

    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ url
    image_id = getGoogleDriveFileID(image_url)
    image_path = await downloadFromGoogleDrive(image_id)
    
    # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await resize_image(image_path, 720, 1280)

    logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ —Ä–∞–∑–º–µ—Ä–∞ 720x1280: {image_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(image_path):
        error_text = f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞: {image_path}"
        logger.error(error_text)
        await safe_edit_message(
            message_for_edit,
            error_text
        )
        return
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_edit_message(
        message_for_edit,
        text.MAGNIFIC_UPSCALE_TEXT,
    )

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å Magnific
    magnific_service = get_magnific_task_factory()

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª –∏ –ø–æ–ª—É—á–∞–µ–º base64 —Å—Ç—Ä–æ–∫—É
    try:
        width, height, resize_result_base64 = validate_image_for_magnific(image_path)
        logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω: {width}x{height}")
    except FileValidationError as e:
        await safe_edit_message(
            message_for_edit,
            f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {e}"
        )
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º upscale
    try:
        magnific_result_url = await magnific_service.upscale_image(
            image=resize_result_base64,
            optimized_for="standard",
            creativity=-8,
            hdr=8,
            resemblance=-10,
            fractality=6,
            engine="magnific_sharpy",
            scale_factor="2x",
        )
    except Exception as e:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await message_for_edit.delete()
        except Exception as delete_error:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {delete_error}")
        
        error_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ Magnific Upscale –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"
        logger.error(error_text)
        await safe_send_message(
            error_text,
            call.message,
        )
        return  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤–º–µ—Å—Ç–æ raise, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ upscale
    await message_for_edit.delete()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await process_save_image(
        call,
        state,
        model_name,
        image_index,
        result_url=magnific_result_url,
        name_postfix="magnific_upscale",
        kb_with_magnific_upscale=False,
    )

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        os.remove(image_path)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def hand_add():
    magnific_upscale_router.callback_query.register(
        start_magnific_upscale,
        lambda call: call.data.startswith("magnific_upscale"),
    )
