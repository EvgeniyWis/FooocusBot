from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from utils.handlers.messages import safe_edit_message

from bot.factory.user_factory import get_user_settings_service
from bot.InstanceBot import router
from bot.logger import logger


async def show_user_profile(callback: CallbackQuery):
    message = callback.message
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    service = await get_user_settings_service()

    user_db_id = await service.repo.get_user_db_id(user_id)
    if user_db_id is None:
        await safe_edit_message(
            "‚ö†Ô∏è –£ –≤–∞—Å –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å.\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                            callback_data="user|create_profile",
                        ),
                    ],
                ],
            ),
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    loras = await service.get_user_loras(user_id)
    prompts = await service.get_user_prompts(user_id)

    loras_text = (
        "\n".join(
            f"üìå –ú–æ–¥–µ–ª—å: {l['model_name']} | –ù–∞—Å—Ç—Ä–æ–π–∫–∞: {l['setting_number']} | LoRA ID: {l['lora_id']} | –í–µ—Å: {l['weight']}"
            for l in loras
        )
        if loras
        else "‚Äî –Ω–µ—Ç –ª–æ—Ä"
    )

    prompts_text = (
        "\n".join(
            f"üìù –ú–æ–¥–µ–ª—å: {p['model_name']} | –ù–∞—Å—Ç—Ä–æ–π–∫–∞: {p['setting_number']}\n{p['prompt']}"
            for p in prompts
        )
        if prompts
        else "‚Äî –Ω–µ—Ç –ø—Ä–æ–º–ø—Ç–æ–≤"
    )

    await safe_edit_message(
        message,
        f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
        f"üìä *–í—ã–±—Ä–∞–Ω–Ω—ã–µ LoRA:*\n{loras_text}\n\n"
        f"‚úçÔ∏è *–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã:*\n{prompts_text}",
        parse_mode="Markdown",
    )


async def create_user_profile(call: CallbackQuery):
    user_id = call.from_user.id
    service = await get_user_settings_service()

    await service.ensure_user_exists(user_id)
    await safe_edit_message(
        call.message,
        "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏!",
    )


def hand_add():
    router.callback_query.register(
        show_user_profile,
        lambda call: call.data.startswith("user|profile"),
    )
    router.callback_query.register(
        create_user_profile,
        lambda call: call.data.startswith("user|create_profile"),
    )
